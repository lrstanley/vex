// Code generated by accessory; DO NOT EDIT.

package styles

import (
	"image/color"
)

func (tc *ThemeConfig) Dark() bool {
	if tc == nil {
		return false
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.dark
}

func (tc *ThemeConfig) Fg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.fg
}

func (tc *ThemeConfig) SuccessFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.successFg
}

func (tc *ThemeConfig) SuccessBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.successBg
}

func (tc *ThemeConfig) WarningFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.warningFg
}

func (tc *ThemeConfig) WarningBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.warningBg
}

func (tc *ThemeConfig) ErrorFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.errorFg
}

func (tc *ThemeConfig) ErrorBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.errorBg
}

func (tc *ThemeConfig) InfoFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.infoFg
}

func (tc *ThemeConfig) InfoBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.infoBg
}

func (tc *ThemeConfig) StatusBarBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarBg
}

func (tc *ThemeConfig) StatusBarFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarFg
}

func (tc *ThemeConfig) StatusBarActivePageFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarActivePageFg
}

func (tc *ThemeConfig) StatusBarActivePageBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarActivePageBg
}

func (tc *ThemeConfig) StatusBarFilterTextFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarFilterTextFg
}

func (tc *ThemeConfig) StatusBarFilterBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarFilterBg
}

func (tc *ThemeConfig) StatusBarFilterFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarFilterFg
}

func (tc *ThemeConfig) StatusBarAddrBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarAddrBg
}

func (tc *ThemeConfig) StatusBarAddrFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarAddrFg
}

func (tc *ThemeConfig) StatusBarLogoBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarLogoBg
}

func (tc *ThemeConfig) StatusBarLogoFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.statusBarLogoFg
}

func (tc *ThemeConfig) ShortHelpKeyFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.shortHelpKeyFg
}

func (tc *ThemeConfig) DialogFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.dialogFg
}

func (tc *ThemeConfig) DialogBorderFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.dialogBorderFg
}

func (tc *ThemeConfig) DialogTitleFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.dialogTitleFg
}

func (tc *ThemeConfig) DialogTitleFromFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.dialogTitleFromFg
}

func (tc *ThemeConfig) DialogTitleToFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.dialogTitleToFg
}

func (tc *ThemeConfig) PageBorderFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.Lock()
	defer tc.mu.Unlock()
	return tc.pageBorderFg
}
