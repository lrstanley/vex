// Code generated by accessory; DO NOT EDIT.

package styles

import (
	"image/color"
)

func (tc *ThemeConfig) SupportsAdvancedColors() bool {
	if tc == nil {
		return false
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.supportsAdvancedColors
}

func (tc *ThemeConfig) AppFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.appFg
}

func (tc *ThemeConfig) AppBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.appBg
}

func (tc *ThemeConfig) SuccessFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.successFg
}

func (tc *ThemeConfig) SuccessBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.successBg
}

func (tc *ThemeConfig) WarningFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.warningFg
}

func (tc *ThemeConfig) WarningBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.warningBg
}

func (tc *ThemeConfig) ErrorFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.errorFg
}

func (tc *ThemeConfig) ErrorBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.errorBg
}

func (tc *ThemeConfig) InfoFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.infoFg
}

func (tc *ThemeConfig) InfoBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.infoBg
}

func (tc *ThemeConfig) ScrollbarThumbFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.scrollbarThumbFg
}

func (tc *ThemeConfig) ScrollbarTrackFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.scrollbarTrackFg
}

func (tc *ThemeConfig) BarBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.barBg
}

func (tc *ThemeConfig) BarFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.barFg
}

func (tc *ThemeConfig) StatusBarFilterTextFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarFilterTextFg
}

func (tc *ThemeConfig) StatusBarFilterBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarFilterBg
}

func (tc *ThemeConfig) StatusBarFilterFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarFilterFg
}

func (tc *ThemeConfig) StatusBarAddrBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarAddrBg
}

func (tc *ThemeConfig) StatusBarAddrFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarAddrFg
}

func (tc *ThemeConfig) StatusBarUserFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarUserFg
}

func (tc *ThemeConfig) StatusBarUserBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarUserBg
}

func (tc *ThemeConfig) StatusBarTokenTTLFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarTokenTTLFg
}

func (tc *ThemeConfig) StatusBarTokenTTLBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarTokenTTLBg
}

func (tc *ThemeConfig) StatusBarLogoBg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarLogoBg
}

func (tc *ThemeConfig) StatusBarLogoFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.statusBarLogoFg
}

func (tc *ThemeConfig) ShortHelpKeyFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.shortHelpKeyFg
}

func (tc *ThemeConfig) DialogFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.dialogFg
}

func (tc *ThemeConfig) DialogBorderFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.dialogBorderFg
}

func (tc *ThemeConfig) DialogBorderGradientFromFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.dialogBorderGradientFromFg
}

func (tc *ThemeConfig) DialogBorderGradientToFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.dialogBorderGradientToFg
}

func (tc *ThemeConfig) TitleFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.titleFg
}

func (tc *ThemeConfig) TitleFromFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.titleFromFg
}

func (tc *ThemeConfig) TitleToFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.titleToFg
}

func (tc *ThemeConfig) PageBorderFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.pageBorderFg
}

func (tc *ThemeConfig) PageBorderFilterFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.pageBorderFilterFg
}

func (tc *ThemeConfig) ListItemFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.listItemFg
}

func (tc *ThemeConfig) ListItemSelectedFg() color.Color {
	if tc == nil {
		return nil
	}
	tc.mu.RLock()
	defer tc.mu.RUnlock()
	return tc.listItemSelectedFg
}
